openapi: 3.1.0
info:
  title: Library API
  description: >
    The Library Management API provides a comprehensive suite of endpoints to manage all aspects of a library system.
    This API is designed to facilitate the operations of libraries, including catalog management, borrowing systems, 
    user accounts, and administrative functions. It allows integration with web and mobile applications to provide 
    seamless interaction for library staff, members, and system administrators.
  version: 1.0.0
servers:
  - url: https://api.database.com
tags:
  - name: User
    description: Operations for user management, including authentication.
  - name: Book
    description: Operations related to managing books in the library.
  - name: Book copy
    description: Operations related to managing the specific copies of the books.
  - name: Borrow record
    description: Operations related to managing the borrow records and tracking who had which book copy when.
  - name: Validation
    description: Operations related to validating the database. These routes can only be used by administrators.
paths:
  /authentication/register/:
    post:
      summary: Register
      description: Create a new user and return the session token as a cookie
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: jon_doe@example.com
                password:
                  type: string
                  example: jon2012
                first_name:
                  type: string
                  example: Jon
                last_name:
                  type: string
                  example: Doe
              required:
                - email
                - password
                - first_name
                - last_name
      responses:
        '200':
          description: Success. The session token is returned as a cookie.
          headers:
            Set-Cookie:
              description: A session token set as a cookie. This cookie should be included in subsequent requests.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
        '422':
          description: There are missing fields or fields with invalid type.
        '500':
          description: Internal server error.
  /authentication/login/:
    post:
      summary: Login
      description: Authenticate an existing user and return a session token as a cookie.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: jon_doe@example.com
                password:
                  type: string
                  example: jon2012
              required:
                - email
                - password
      responses:
        '200':
          description: Success. The session token is returned as a cookie.
          headers:
            Set-Cookie:
              description: A session token set as a cookie. This cookie should be included in subsequent requests.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
        '401':
          description: Invalid credentials.
        '404':
          description: User not found. Please register.
        '500':
          description: Internal server error.
  /authentication/currentUser/:
    get:
      summary: Current user
      description: Returns the currently signed in user, based on the session token.
      tags:
        - User
      security:
        - cookieAuth: [ ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  entities:
                    $ref: '#/components/schemas/User'
        '401':
          description: Session not found.
        '422':
          description: No session token provided.
        '500':
          description: Internal server error.
  /authentication/logout/:
    post:
      summary: Logout
      description: Logout an existing user.
      security:
        - cookieAuth: [ ]
      tags:
        - User
      responses:
        '200':
          description: Success
        '401':
          description: Invalid credentials.
        '404':
          description: User not found. Please register.
        '500':
          description: Internal server error.
  /book/:
    get:
      summary: List
      description: Returns a list of all books.
      tags:
        - Book
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  entities:
                    $ref: '#/components/schemas/BookArray'
        '422':
          description: No session token provided.
        '500':
          description: Internal server error.
  /book/:id:
    get:
      summary: Get by Id
      description: Returns the book with the given id.
      tags:
        - Book
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  entities:
                    $ref: '#/components/schemas/Book'
        '404':
          description: No book with the provided id exists.
        '422':
          description: No session token provided.
        '500':
          description: Internal server error.
  /bookCopy/:
    get:
      summary: List
      description: Returns a list of all book copies.
      tags:
        - Book copy
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  entities:
                    $ref: '#/components/schemas/BookCopyArray'
        '422':
          description: No session token provided.
        '500':
          description: Internal server error.
  /bookCopy/:id:
    get:
      summary: Get by Id
      description: Returns the book copy with the given id.
      tags:
        - Book copy
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  entities:
                    $ref: '#/components/schemas/BookCopy'
        '404':
          description: No book copy with the provided id exists.
        '422':
          description: Missing or malformed fields.
        '500':
          description: Internal server error.
  /borrowRecord/borrow/:
    post:
      summary: Borrow book
      description: Marks a book copy as borrowed and assigns it to a user
      tags:
        - Borrow record
      security:
        - cookieAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: jon_doe@example.com
                password:
                  type: string
                  example: jon2012
              required:
                - email
                - password
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  entities:
                    $ref: '#/components/schemas/BorrowRecord'
        '422':
          description: No session token provided.
        '500':
          description: Internal server error.
  /borrowRecord/myRecords:
    get:
      summary: List all active records
      description: returns a list with all the active borrow records for an authenticated user
      tags:
        - Borrow record
      security:
        - cookieAuth: [ ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  entities:
                    $ref: '#/components/schemas/BorrowRecordArray'
        '401':
          description: Unauthenticated
        '422':
          description: Missing or malformed fields.
        '500':
          description: Internal server error.
  /borrowRecord/myRecords/book/:book_id:
    get:
      summary: Get by book
      description: returns a active borrow record for a given book if one is available
      tags:
        - Borrow record
      security:
        - cookieAuth: [ ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  entities:
                    $ref: '#/components/schemas/BorrowRecord'
        '404':
          description: No book or active borrow record found
        '422':
          description: Missing or malformed fields.
        '500':
          description: Internal server error.
  /validateDB/:
    get:
      summary: Validate DB
      description: checks for inconsistencies in the database and fixes them
      tags:
        - Validation
      security:
        - cookieAuth: [ ]
      responses:
        '200':
          description: Success.
        '500':
          description: Internal server error.

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session_token
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 129
        email:
          type: string
          format: email
          example: jon_doe@example.com
        password:
          type: string
        first_name:
          type: string
          example: Jon
        last_name:
          type: string
          example: Doe
        image_url:
          type: string
          example: https://example.com/image.png
          nullable: true
        permissions:
          type: string
          example: STUDENT

    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/User'

    Book:
      type: object
      properties:
        book_id:
          type: integer
          format: int64
          example: 129
        title:
          type: string
          example: To Kill a Mockingbird
        description:
          type: string
          example: A novel about the serious issues of rape and racial inequality.
          nullable: true
        publisher:
          type: string
          example: J.B. Lippincott & Co.
          nullable: true
        author:
          type: string
          example: Harper Lee
          nullable: true
        year:
          type: integer
          format: int64
          example: 1960
          nullable: true
        edition:
          type: integer
          format: int64
          example: 1
          nullable: true
        isbn:
          type: string
          example: 9780060935467
        language_code:
          type: string
          example: en
          nullable: true
        total_copies:
          type: integer
          format: int64
          example: 5
          nullable: true
        available_copies:
          type: integer
          format: int64
          example: 4
          nullable: true
        average_rating:
          type: number
          format: float
          example: 4.5
          nullable: true
        times_borrowed:
          type: integer
          format: int64
          example: 20
          nullable: true
        sum_rating:
          type: number
          format: float
          example: 450
        count_rating:
          type: integer
          format: int64
          example: 100
        cover_url:
          type: string
          example: https://example.com/image.png
          nullable: true
        availability:
          type: string
          enum:
            - AVAILABLE
            - NOT_AVAILABLE
            - SOON_AVAILABLE
          example: AVAILABLE

    BookArray:
      type: array
      items:
        $ref: '#/components/schemas/Book'

    BookCopy:
      type: object
      properties:
        book_copy_id:
          type: integer
          format: int64
          example: 34
        status:
          type: string
          enum:
            - BORROWED
            - NOT_BORROWED
          example: NOT_BORROWED
        book:
          $ref: '#/components/schemas/Book'

    BookCopyArray:
      type: array
      items:
        $ref: '#/components/schemas/BookCopy'

    BorrowRecord:
      type: object
      properties:
        borrow_record_id:
          type: integer
          format: int64
          example: 24
        borrow_date:
          type: string
          format: date-time
          example: "2024-12-03T12:25:13Z"
        return_date:
          type: string
          format: date-time
          example: "2024-12-03T12:25:13Z"
        status:
          type: string
          enum:
            - BORROWED
            - NOT BORROWED
          example: BORROWED
        rating:
          type: number
          format: double
          example: 5.0
          nullable: true
        book_copy:
          $ref: '#/components/schemas/BookCopy'
        user:
          $ref: '#/components/schemas/User'

    BorrowRecordArray:
      type: array
      items:
        $ref: '#/components/schemas/BorrowRecord'